%classdef SpikeDATA_class < handle
classdef SpikeDATA_class <dynamicprops
    %UNTITLED3 Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        fname
        fullname
        fdate_str
        fdate_datetime
        CHANS  % Cell array of CHAN structs, from LoadSMR_class.
        AllChanList
        DataStartTime_datetime  % A Matlab datetime object with the "wall clock" start time for the data file.
        TickInterval_sec
        TicksPerSec
        
        SampleRate
        SampleInterval_sec
        TicksPerSample
        Stim_ticks % "Fixed" ticks, lined up with Values samples.
        
        STM  % StimTextMarks, derived from TextMark channel, if present.
    end
    
    % Transient properties do NOT get saved out to a MAT file.
    properties(Transient)
        Values  % Convenience copy of the NerveCon analog data array.
    end
    
    methods
        function CHAN = GetChan(obj, ChanName)
            CHAN = [];
            for i=1:length(obj.CHANS)
                if strcmp(ChanName, obj.CHANS{i}.Name)
                    CHAN = obj.CHANS{i};
                    break;
                end
            end
        end
        
        function SaveMAT(obj, fname)
            % Save the current object to a MAT file. If name is not given, it
            % saves in the current directory, taking the name from the SMR
            % file name.
            if nargin < 2; fname = [obj.fname '.MAT']; end
            DATA=obj;
            save(fname, 'DATA');
        end
        
        function blkidx = GetBlockFromParams(obj, NStim, StimE, RefE, StimCur, ToU)
            StimBlocks = obj.StimBlocks;
            
            % Start with all 1's, to initially SELect all stim blocks.
            SEL = logical(1:length(StimBlocks));
            
            % Now filter by each given parameter.
            if ~isempty(NStim);   SEL = SEL & ismember([StimBlocks.NStim], NStim); end
            if ~isempty(StimE);   SEL = SEL & ismember([StimBlocks.Stim_E], StimE); end
            if ~isempty(RefE);    SEL = SEL & ismember([StimBlocks.Ref_E], RefE); end
            if ~isempty(StimCur); SEL = SEL & ismember([StimBlocks.Current_uA], StimCur); end
            if ~isempty(ToU); SEL = SEL & ismember([StimBlocks.ToUse], ToU); end
            blkidx = find(SEL);
        end
        
        
        % Return the StimBlock that "contains" the given time value, or empty
        % if the time is not within the bounds of a StimBlock.
        function blkidx = BlockFromTime(obj, time)
            ticks = round(time .* obj.TicksPerSec);
            blkidx = BinarySearch_LE([obj.StimBlocks.Start_tick], ticks);
            if isempty(blkidx); return; end
            if ticks > obj.StimBlocks(blkidx).End_tick
                blkidx = [];
            end
        end
        
        % Return the sample index that is less than or equal to the passed
        % tick value. Also return the tick of the sample.
        function [sampidx, samptick]= SampLE_tick(obj, tick)
            sampidx = floor(tick/obj.TicksPerSample);
            samptick = round(sampidx*obj.TicksPerSample);
            %fprintf(' In SampLE_tick(%d [class: %s]): idx %d, tick %d\n', ...
            %   tick, class(tick), sampidx, samptick);
        end
        
        % Return the sample index that is Greater Than the passed tick.
        function [sampidx, samptick] = SampGT_tick(obj, tick)
            sampidx = floor(tick/obj.TicksPerSample) + 1;
            samptick = round(sampidx*obj.TicksPerSample);
        end
        
        % Return the sample index that is Greater Than or Equal To the passed
        % tick.
        function [sampidx, samptick] = SampGE_tick(obj, tick)
            sampidx = ceil(tick/obj.TicksPerSample);
            samptick = round(sampidx*obj.TicksPerSample);
        end
        
        % Return an array of Stim_ticks that is >= start_tick and <= end_tick.
        function ticks_between = TicksBetween(obj, start_tick, end_tick)
            stidx = BinarySearch_GE(obj.Stim_ticks, start_tick);
            endidx = BinarySearch_LE(obj.Stim_ticks, end_tick);
            if (start_tick>end_tick) || isempty(stidx) || isempty(endidx); ticks_between=[]; return; end
            ticks_between = obj.Stim_ticks(stidx:endidx);
        end
        
        % Note that the last Val sample will have a tick time Greater Than or
        % Equal To end_tick, so that the analog Vals "surround" the start/end
        % ticks. Since Matlab indexing starts at 1, the Zero_tick value
        % represents the tick time of ONE SAMPLE BEFORE the first sample in
        % Vals_out. Zero_tick can then be used to subtract from other tick
        % events for this file, to line them up correctly with the Vals_out
        % data.
        function [Vals_out, Zero_tick] = ValsBetweenTicks(obj, start_tick_in, end_tick_in)
            [Start_idx, Start_tick] = obj.SampLE_tick(start_tick_in);
            [End_idx, End_tick] = obj.SampGE_tick(end_tick_in);
            Vals_out = obj.Values(Start_idx:End_idx);
            Zero_tick = Start_tick - obj.TicksPerSample;
        end
        
        % Get the data values between two times.
        function vals = ValsBetweenTimes(obj, T1, T2, chan)
            ch = obj.GetChan(chan);
            S1 = round(T1 * ch.SampleRate);
            S2 = round(T2 * ch.SampleRate);
            vals = ch.Data(S1:S2);
        end
        
        % For convenience, gets Vals and Stims between tick values. The
        % returned Stims have Zero_tick subtracted out, to re-line them up
        % with the returned Vals_out analog samples.
        function [Vals_out, Stim_ticks_out, Zero_tick] = ...
                DataBetweenTicks(obj, start_tick, end_tick)
            
            [Vals_out, Zero_tick] = obj.ValsBetweenTicks(start_tick, end_tick);
            Stim_ticks_out = obj.TicksBetween(start_tick, end_tick) - Zero_tick;
        end
        
		% Get some samples, starting at the given Tick. If we can't give all
		% NSAMPS, then we give EMPTY. For convenience, return the start and
		% end sample indices.
        function [Vals, s_idx, e_idx] = ValsAtTick(obj, tick_start, NSAMPS, chan)
            ch = obj.GetChan(chan);
            s_idx = floor(tick_start/ch.TicksPerSample);
            e_idx = s_idx+NSAMPS-1;
            
            if e_idx > length(ch.Data); Vals=[]; return; end
            Vals = double(ch.Data(s_idx:e_idx));
        end
        
        % Get the data before the stim block, and within the stim block.
        % Also return the sample indices of the stim ticks.
        %
        % You can choose to get the pre-zapped data by passing the DATA
        % array. If not, then it takes from Values_zapped.
        function [Dpre, Dper, StimIdx] = GetBlockData(obj, blockidx, chan)
            %fprintf('GetBlockData() nargin %d\n', nargin);
            ch = obj.GetChan(chan);
            D = obj;
            %Z = obj.Z;
            B = D.StimBlocks(blockidx);
            %             T1 = B.Start_tick/D.TicksPerSample;
            %             T2 = B.End_tick/D.TicksPerSample+1100;
            T1 = B.Start_sec;
            T2 = B.End_sec+1100*(1/ch.SampleRate);
            %fprintf('Times %.3f to %.3f\n', T1, T2);
            
            if round(T1*ch.SampleRate) == B.Start_tick/ch.TicksPerSample
                T1 = T1-ch.SampleInterval_sec;
                T2 = T2-ch.SampleInterval_sec;
            end
            [round(T1*D.SampleRate) B.Start_tick/ch.TicksPerSample];
            if nargin < 3
                DATA = Z.Values_zapped;  % Default to using zapped values.
            end
            
            if blockidx>1
                Bb4 = D.StimBlocks(blockidx-1);
                T2B4 = Bb4.End_sec+1100*ch.SampleInterval_sec;
                if (T1-0.95)<T2B4
                    t2Use = Bb4.End_sec+1100*ch.SampleInterval_sec;
                else
                    t2Use = T1-0.95;
                end
            else
                t2Use = T1-0.95;
            end
            Dper = obj.ValsBetweenTimes(T1, T2, chan);
            Dpre = obj.ValsBetweenTimes(t2Use, T1, chan);
            % 			Dper = DATA(T1:T2);
            %             Dpre = DATA(T1-0.95*D.SampleRate:T1);
            
            % Get the stim ticks for this block.
            STM_TICKS = obj.TicksBetween(B.Start_tick, B.End_tick);
            
            % Convert to sample number offset within the returned Dper
            % data.
            StimIdx = double((STM_TICKS - B.Start_tick) ./ ch.TicksPerSample) + 1;
        end
        
    end
    
    methods(Static)
        
        
        % Re-constitute the "Transient" Values property when we load.
        function lobj = loadobj(obj)
            % For convenience, set the Values array to the head stage data.
            NERVE = obj.GetChan('NerveCon');
            obj.Values = NERVE.Data;
            
            % The int64 type causes nothing but headaches. Get rid of it.
            obj.Stim_ticks = double(obj.Stim_ticks);
            lobj = obj;
        end
        
        function DATA=LoadMAT(fname)
            LL = load(fname);
            DATA = LL.DATA;
        end
        
        % Convert a directory tree of SMR files to MAT SpikeDATA_class files.
        function ConvertSMRTree(OVERWRITE_EXISTING)
            root='V:\Monkey Single Unit Recording\MoMo Single Unit recording\';
            OUTroot='c:\prj\Ross7\SpikeMark\Data\MoMo\';
            
            if nargin < 1; OVERWRITE_EXISTING=false; end
            
            % Do a "wildcard" dir, looking for just the single-unit data folders, which
            % all end with the same words.
            dirs = dir([root '*single unit recording']);
            
            DateStart = datetime(2010, 12, 01);
            DateEnd = [];
            %for d_idx = 1:length(dirs)
            for d_idx = length(dirs):-1:1   % REVERSE order
                dname = dirs(d_idx).name;
                fprintf('  =======  Looking at dir: %s  =======\n', dname);
                if length(dname) < 7; continue; end
                
                YEAR = str2double(dname(1:4)); MONTH = str2double(dname(6:7)); DAY = str2double(dname(9:10));
                DIRDate = datetime(dname(1:10));
                if DIRDate < DateStart; continue; end
                if ~isempty(DateEnd) && DIRDate > DateEnd; continue; end
                
                % Get list of ONLY the CED .SMR data files.
                files = dir([root dname '\*.smr']);
                
                % LOOP through all of the .SMR files in the folder.
                for f_idx = 1:length(files)
                    fname = files(f_idx).name;
                    DATA = [];
                    
                    % *** GATHER info to create destination .MAT file, so we can first
                    % see if it already exists.
                    % Save the data locally, for faster access in the future.
                    [~,FOLDER,~] = fileparts(files(f_idx).folder);
                    OUT_FOLDER = [OUTroot FOLDER];
                    
                    % Make sure destination folder exists.
                    if ~exist(OUT_FOLDER, 'dir')
                        mkdir(OUT_FOLDER);
                    end
                    
                    % Add OUTroot destination folder, and remove ".smr" extension.
                    % Use strtrim() to remove any leading and trailing whitespace.
                    SAVE_fname = [OUTroot FOLDER '\' strtrim(fname(1:end-4))];
                    
                    % If SKIP_EXISTING exists and is true, then don't re-read
                    % the file.
                    if ~OVERWRITE_EXISTING && exist([SAVE_fname '.mat'], 'file')
                        fprintf('Skipping existing file %s\n', [FOLDER strtrim(fname(1:end-4)) '.MAT']);
                        continue;
                    end
                    
                    fprintf('Loading file %s\n', fname);
                    DATA = SpikeDATA_class.LoadSMRFile([files(f_idx).folder '\' fname]);
                    
                    % Empty file?
                    if isempty(DATA)
                        fprintf('  EMPTY or non-stim FILE!!!\n');
                        % Make a dummy zero-length file, so we can skip this empty file next time.
                        F=fopen([SAVE_fname '.MAT'], 'w'); fclose(F);
                        continue;
                    end
                    
                    % Write out data to a MAT file in a local directory tree.
                    fprintf('Saving to: "%s"\n', SAVE_fname);
                    %save(SAVE_fname, 'DATA');
                    DATA.SaveMAT(SAVE_fname);
                end
            end
        end
        
        % Pass in the full path name of the file to load.
        %function obj = LoadSMRFile(fullname)
        function obj=LoadSMRFile(fullname, handles)
            % Load in a Spike2 SMR file, and return a SpikeDATA_class object.
            
            % The SMR class does much of the grunt work of loading the file
            % for us here, so this is neat and simple.
            SMR = LoadSMR_class(fullname, handles);
            %[CHANS,present] = SMR.LoadChans({'NerveCon' 'MVP Sync' 'TextMark'});
            %[CHANS,present] = SMR.LoadChans({'NerveCon' 'CEDStim' 'TextMark' 'CED-SYNC' 'FSYNC' 'Z-VEL' 'Y_VEL' 'X_VEL' 'ACCEL_Z' 'ACCEL_Y' 'ACCEL_X'});
            ToLoad = {SMR.AllChanList.Name};
            if any(contains(ToLoad,{'DriftDB'}))
                ToLoad(contains(ToLoad,{'DriftDB'})) = [];
            end
            if any(contains(ToLoad,{'Keyboard'}))
                ToLoad(contains(ToLoad,{'Keyboard'})) = [];
            end
            
            [CHANS,present] = SMR.LoadChans(ToLoad, handles);
            
            if ~all(present(1:2))
                %warning('SMR file "%s" does not have both NerveCon and MVP Sync Channels!! Ignoring\n', fullname);
                obj=[];
                return;
            end
            
            % Pull out items of interest, and compute the Stimulation tick
            % marks.
            obj = SpikeDATA_class();  % Make new object.
            
            obj.CHANS = CHANS;
            obj.AllChanList = SMR.AllChanList;
            obj.DataStartTime_datetime = SMR.StartTime;
            obj.TickInterval_sec = SMR.TickInterval_sec;
            obj.TicksPerSec = 1/obj.TickInterval_sec;
            [~,obj.fname] = fileparts(fullname);
            obj.fullname = fullname;
            FileInfo = dir(fullname);
            [Y, M, D, H, MN, S] = datevec(FileInfo.datenum);
            obj.fdate_str = sprintf('%4d_%02d_%02d', Y, M, D);
            obj.fdate_datetime = datetime(Y,M,D,H,MN,S);
            
            NERVE = obj.GetChan('NerveCon');
            %STIM = obj.GetChan('MVP Sync');
            STIM = obj.GetChan('CEDStim');
            
            if isempty(NERVE) || isempty(STIM)
                obj=[];
                return;
            end
            
            obj.Values = NERVE.Data;
            obj.SampleRate = NERVE.SampleRate;
            obj.SampleInterval_sec = 1/obj.SampleRate;
            obj.TicksPerSample = NERVE.TicksPerSample;
            
            obj.Stim_ticks = LoadSMR_class.FixTicks(NERVE, round(STIM.Data,2));
            
            TXMARK = obj.GetChan('TextMark');
            if ~isempty(TXMARK) && ~isempty(TXMARK.Data) % Is there a TextMark channel?
                % Be sure to use the "fixed" tick times for the TextMarks.
                TX_fixedticks = LoadSMR_class.FixTicks(NERVE, [TXMARK.Data.m_Time]);
                obj.STM = StimTextMark(TXMARK.Data, obj.TicksPerSec, TX_fixedticks);
            end
            
            % Close the SMR data file.
            clear SMR;
        end
        
    end
end
